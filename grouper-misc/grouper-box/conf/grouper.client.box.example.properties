# these are properties to add to grouperClient.properties

# put groups in here which go to box, the name in box will be the extension here
grouperBox.folder.name.withBoxGroups = box:groups

# put the comma separated list of sources to send to box
grouperBox.sourcesForSubjects = jdbc

# either have id for subject id or an attribute for the box username (e.g. netId)
grouperBox.subjectAttributeForBoxUsername = email

# if there is a suffix (e.g. @institution.edu then append that to the subject attribute to make the box login id
grouperBox.subjectIdSuffix = 

# if there is a require group that users must be in to be a user in box
grouperBox.requireGroup = box:boxUser

# how long to cache box users in the requireGroup in grouper
grouperBox.cacheGrouperUsersForMinutes = 60

# is grouper the true system of record, delete box groups which dont exist in grouper
# note, if you delete the box group, if it is recreated, then shares wont exist
grouperBox.deleteGroupsInBoxWhichArentInGrouper = false

# how long to cache "getAllUsers", which usually takes a minute to get tens of thousands of users, default 10 minutes
grouperBox.boxUserCacheMinutes = 10

#the quartz cron is a cron-like string. 
# http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger
grouperBox.fullSync.quartzCron = 0 0 5 * * ?

# authentication settings for WS
# put pem encrypted in database, put 2k chars in each section
grouperBox.privateKeyContents_0 =
grouperBox.privateKeyContents_1 =
# if not putting pem in database, you can put it on the filesystem, list the filename
grouperBox.privateKeyFileName = 
grouperBox.privateKeyPass = 
grouperBox.publicKeyId = 
grouperBox.enterpriseId = 
grouperBox.clientId = 
grouperBox.clientSecret = 
grouperBox.proxyHost =
grouperBox.proxyPort =

# should log in the event log if no messages
grouperBox.logIfNoMessages = false

# messaging config for incremental changes, blank to use default
grouperBox.messaging.systemName = grouperBuiltinMessaging
# queueName is required for incremental provisioning
grouperBox.messaging.queueName = box_queue

# if you want to perform a full sync with each message received (note, assumes only applicable messages are sent)
# note, will wait X 30? seconds, then mark subsequent messages as complete for those 30 seconds
grouperBox.fullSyncOnMessage = false

# note, this must be at least 5 seconds
grouperBox.fullSyncOnMessageWaitSeconds = 30

#the quartz cron is a cron-like string. 
# http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger
# this defaults to every 30 seconds since the messaging long polls for 20 seconds.
grouperBox.incrementalSync.quartzCron = 0/30 * * * * ?

# if a user is not in the grouperBox.requireGroup group, then set the user's status to inactive, cannot_delete_edit, or cannot_delete_edit_upload
# if this is blank then dont worry about it
# be careful that you dont lock out your admin account(s), whitelist below
grouperBox.statusDeprovisionedUsers = 

# if a user is not in the grouperBox.requireGroup group, then set is_sync_enabled to false
grouperBox.deprovisionDisableSync = false

# if a user is in the grouperBox.requireGroup group, then set the user's status to active
# if this is blank then dont worry about it
grouperBox.statusUndeprovisionedUsers = 

# if a user is in the grouperBox.requireGroup group, then set is_sync_enabled to true
grouperBox.undeprovisionEnableSync = false

# these could be administrative id's to never invalidate, comma separated
grouperBox.whitelistBoxIds = a@b.c, b@c.d

# default box group attributes: admins_only, admins_and_members, all_managed_users
grouperBox.invitabilityLevel = admins_and_members
grouperBox.memberViewabilityLevel = admins_and_members

# quartz stuff
org.quartz.scheduler.instanceName = MyScheduler
org.quartz.threadPool.threadCount = 3
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
