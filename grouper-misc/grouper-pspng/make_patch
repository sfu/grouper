#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

export JAVA_HOME=/opt/jdk1.8.0_181

RELEASE_VERSION=2.5.0
RELEASE_TAG=GROUPER_2_5_0

PATCH_BRANCH=master

cd $(dirname "${BASH_SOURCE[0]}")
D=$(pwd -P)

[ ! -d m2 ] && mkdir -p m2
export MAVEN_OPTS=-Dmaven.repo.local=$D/m2

echo ""


if [ ! -d work ]; then
  mkdir work
else
  echo "Work directory exists"
  echo "Removing selective files"
  rm -rf work/GROUPER*
  rm -rf work/grouper*
  rm -rf work/master*
  rm -rf work/${PATCH_BRANCH} work/${PATCH_BRANCH}.zip
fi


# SETUP DIRECTORIES
  # download RELEASE source if we don't have it yet
  [ ! -r $RELEASE_TAG.zip ] &&  wget https://github.com/Internet2/grouper/archive/$RELEASE_TAG.zip
  ln $RELEASE_TAG.zip work

  FETCH_SOURCE=no
  if [ ! -r ${PATCH_BRANCH}.zip ]; then
    FETCH_SOURCE=yes
  else
    read -p "Should latest source code be downloaded [Y/n] " ans
    [[ -z "$ans" || "$ans" =~ [yY].* ]] && FETCH_SOURCE=yes
  fi
    
  if [ $FETCH_SOURCE = yes ]; then
    # delete old download file if it exists
    [ -r ${PATCH_BRANCH}.zip ] && rm -f ${PATCH_BRANCH}.zip

    echo "Fetching ${PATCH_BRANCH}.zip"
    wget https://github.com/Internet2/grouper/archive/${PATCH_BRANCH}.zip
  fi
  
  rm -f work/${PATCH_BRANCH}.zip
  ln ${PATCH_BRANCH}.zip work

  echo "Unzipping latest grouper zip file"
  (cd work; unzip -q ${PATCH_BRANCH}.zip)

  read -p "Source code has been unzipped. Press return to continue..."

  [ ! -r grouperInstaller.jar ] &&  wget http://software.internet2.edu/grouper/release/$RELEASE_VERSION/grouperInstaller.jar

  # we need to break apart grouperInstaller so we can replace the robot-input file
  [ -d grouperInstaller.d ] && rm -rf grouperInstaller.d

  if [ ! -d grouperInstaller.d ]
  then
    mkdir grouperInstaller.d
    (cd grouperInstaller.d ; unzip -q ../grouperInstaller.jar)
  fi

  if [ ! -d work/apache-maven-3.2.5 ]; then
    (cd work; wget https://software.internet2.edu/grouper/downloads/tools/apache-maven-3.2.5-bin.tar.gz; tar -xzvf apache-maven-3.2.5-bin.tar.gz)
  fi
  

export M2_HOME=$D/work/apache-maven-3.2.5/
PATH=$M2_HOME/bin:$JAVA_HOME/bin:$PATH


# 
# Pull latest grouper jars out of latest docker image
#
  # First figure out what is the latest tier/grouper docker image

  # These seem to come out in the order they were updated. If that changes, then we'll have to fetch all the pages and sort them by json data
  LATEST_TAG=$(curl --silent --location 'https://hub.docker.com/v2/repositories/tier/grouper/tags?page_size=1000'  |jq -r .results[].name  | fgrep $RELEASE_VERSION | fgrep -v -e -test | head -1)

  echo "Going to use latest docker image to fetch dependent jars: $LATEST_TAG"

  DOCKER_CONTAINER=
  trap '[ "${CLEANUP:-yes}" = yes -a -n "${DOCKER_CONTAINER}" ] && echo "Removing conatiner" && docker rm -f ${DOCKER_CONTAINER}' exit 

  # Run the latest tier/grouper image for a while... enough to get jar files out
  DOCKER_CONTAINER=$(docker run --rm -d tier/grouper:$LATEST_TAG sleep 900)
  docker exec $DOCKER_CONTAINER yum install -y zip

  rm -rf work/container_*
  mkdir work/container_jars

  # We need 3 jars: grouperClient, grouper (api), morphString
  #  grouperClient: just grab the jar from the latest image
  #  morphString:   just grab the jar from the latest image
  #  grouper (api): overlay conf/edu/internet2/middleware atop grouper.jar
  #
  # Just for fun, we're also pulling out an updated pspng jar file. This isn't needed by the patch process, but it 
  # might be useful for other pspng development
  # 

  echo "Grabbing grouperClient.jar from $LATEST_TAG"
  docker cp $DOCKER_CONTAINER:/opt/grouper/grouper.apiBinary/lib/grouper/grouperClient.jar work/container_jars
  echo "Grabbing morphString.jar from $LATEST_TAG"
  docker cp $DOCKER_CONTAINER:/opt/grouper/grouper.apiBinary/lib/grouper/morphString.jar work/container_jars

  echo "Grabbing a patched grouper-api jar file from $LATEST_TAG"
  # Grab all the patched files from conf, remove the patched pspng files and update the grouper jar file
  docker exec $DOCKER_CONTAINER bash -c "
	cp -a conf/edu /tmp && 
	cp dist/lib/grouper.jar /tmp/grouper-${RELEASE_VERSION}-SNAPSHOT.jar &&
	rm -rf /tmp/edu/internet2/middleware/grouper/pspng &&
	cd /tmp &&
	zip -rvu grouper-${RELEASE_VERSION}-SNAPSHOT.jar edu"

  docker cp $DOCKER_CONTAINER:/tmp/grouper-${RELEASE_VERSION}-SNAPSHOT.jar work/container_jars
 
  # Grab all the patched pspng files (remove all the files that aren't pspng)
  echo "Grabbing a patched grouper-pspng jar file from $LATEST_TAG"
  docker exec $DOCKER_CONTAINER bash -c "
	cp lib/custom/grouper-pspng-${RELEASE_VERSION}.jar /tmp/grouper-pspng-${RELEASE_VERSION}-SNAPSHOT.jar &&
        rm -rf /tmp/edu &&
	cp -a conf/edu /tmp && 
	cd /tmp &&
        find edu -type f -print | fgrep -v pspng | xargs rm -f &&
        find edu -type d -print | xargs rmdir --parents --ignore-fail-on-non-empty &&
	zip -rvu grouper-pspng-${RELEASE_VERSION}-SNAPSHOT.jar edu"

  docker cp $DOCKER_CONTAINER:/tmp/grouper-pspng-${RELEASE_VERSION}-SNAPSHOT.jar work/container_jars
 
  (cd work/grouper-master/grouper-parent; mvn --non-recursive install)
  mvn install:install-file -Dfile=work/container_jars/grouperClient.jar -DpomFile=work/grouper-master/grouper-misc/grouperClient/pom.xml
  mvn install:install-file -Dfile=work/container_jars/morphString.jar -DpomFile=work/grouper-master/grouper-misc/morphString/pom.xml
  mvn install:install-file -Dfile=work/container_jars/grouper-${RELEASE_VERSION}-SNAPSHOT.jar -DpomFile=work/grouper-master/grouper/pom.xml
  read -p "Grouper SNAPSHOT jars have been installed. Press return to continue..."
  mvn install:install-file -Dfile=work/container_jars/grouper-pspng-${RELEASE_VERSION}-SNAPSHOT.jar -DpomFile=work/grouper-master/grouper-misc/grouper-pspng/pom.xml


cp -p grouper.installer.properties grouperInstaller.d


echo "Running grouper installer...."

# run an exploded grouperInstaller jar file, with grouper.installer.properties (robot) file
java -cp grouperInstaller.d edu.internet2.middleware.grouperInstaller.GrouperInstaller
